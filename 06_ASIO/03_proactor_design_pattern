Библиотека предлагает поддержку, многопоточных и однопоточных операций. Поддержка однопоточных основывается на шаблоне проектирования Proactor.
Преимущества и недостатки этого подхода по сравнению с синхронным или шаблоном Reactor описаны ниже.

Давайте рассмотрим, как паттерн Proactor реализован в библиотеке, без ссылок на платформозависимые детали.
    - Асинхронные операции
        операции асинхронного чтения и записи например в сокет.
    - Процессор асинхронных операций
        Выполняет асинхронные операции и по завершению операций ставит их  в очередь завершения событий.
    - Очередь завершения событий
        Накапливает очередь завершенных событий до тех пор, пока они не будут обработаны демультеплексером асинхронных событий.
    - Обработчик завершения 
        Обрабатывает результат асинхронных операций. Это функциональный объект, часто создается с использованием boost::bind.
    - Демультеплексор асинхронных событий
        Блок ожидает появления событий в очереди завершения событий, и возвращает события к вызвавшему их объекту.
    - Proactor
        Вызывает демультиплексер для удаления событий из очереди, и отправляет дескриптор завершения(включая функциональный объект) связанный с  событием.
    - Инициатор
        Специфичный для приложения код который вызывает асинхронные операции. Инициатор взаимодейситвует с процессором асинхронных операций при помощи
        высоко уровнего интерфейса такого как basic_stream_socket который в свою очередь делегирует такому сервису как reactive_socket_service.

Реализация с помощью Реактора.
Нам ногих платформах библиотека реализует шаблон проектирования Проактор с точки зрения Реактора. Например select, epoll или kqueue. Эта реализация соотносится 
с шаблоном проектирования Проактор следующим:
    - Процессор асинхронных операций
        Реактор реализуется используя select, epoll или kqueue. Когда реактор указывает, что ресурс готов произвести операции, процессор выполняет асинхронные операции
        и удаляет из очереди ассоциированный обработчик завершения из очереди завершения событий.
    - Очередь завершения событий 
        Список обработчиков завершения(функциональных объектов).
    - Демультеплексер асинхронных событий
        Реализован ожиданием события или condition variable до тех пор пока обработчик завершения доступен в очереди завершения событий.
        