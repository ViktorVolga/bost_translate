Асинхронные операции это базовый модуль композиции в асинхронной модели библиотеки. Асинхронные операции представляют работу которая запущена
и выполняется на заднем фоне, в то время как пользовательский код, который иниицализировал работу может продолжать работу с другими вещами.
Концептуально жизненный цикл асинхронных операций может быть описан следующими событиями и фазами:
    Событие: Асинхронная функция была вызвана функцией инициализации. -> Асинхронная операция выполняется ->
    Событие: Внешний наблюдаемый сторонний эффект если таковой полностью завершен. Обработчик завершения добавляется в очередь для исполнения ->
    Асинхронная операция завершена. ->
    Событие: Обработчик завершения вызван с результатами операции.

Функция инициализации - функция которая может быть вызвана пользователем для старта выполнения асинхронных операций. 
Обработчик завершения - предоставленная пользователем функция, не копирующая, перемещающая объект функция, который будет вызвана по крайне мере
один раз и содержащая результаты выполнения асинхронной операции. Вызов обработчика завершения говорит пользователю, о чем то что уже случилось:
операция завершилась и сторонний эффек от выполнения операции был достигнут.
Инициализирующая функция и обработчик завершения в пользовательском коде взаимодействуют следующим образом:
Функция инициализации -> асинхронная операция -> обработчик завершения.

Синхронные операции воплощаются в виде отдельных функций и имеют несколько присущих семантических свойств как следствие.
Свойства синхронных операций:
    Когда синхронная операция является общей(шаблонной) возвращаемый тип детерменировано выводится из функции и аргументов.
    Если синхронной операции требуются временные ресурсы(такие как память, файловый дескриптор или поток) то такие ресурсы освобождаются до возврата из этой функции.
Свойства асинхронных операций:
    Когда синхронная операция является общей, типы и порядок аргментов обработчика завершения детерминированно получаются из функции инициализации и ее аргументов.
    Если синхронной операции нужны временные ресурсы, они освобождаются перед вызовом обработчика завершения.

Последнее свойство важное для асинхронных операций, так как позволяют обработчику завершения инициализировать дальнейшие асинхронные операции без использования ранее
    выделенных ресурсов. Рассмотрим тривиальный (и относительно общий) случай из нескольких операций повторяющихся снова и снова по цепочке:
    Вызов функции инициализации -> асинхронная операция -> обработчик завершения -> вызов функции инициализации.
Освобождение ресурсов перед вызовом обработчика завершения позволяет избежать пикового использования ресурсов в цепочке операций. 
 

